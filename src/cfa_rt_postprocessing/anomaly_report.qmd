---
title: "Rt Anomaly Report"
format:
    html:
        code-fold: true
        # Use this to include all the CSS stuff in the single HTML file, as opposed to
        # having it in a folder that gets lost when we copy the output HTML file.
        embed-resources: true
        # To allow for wider plots
        page-layout: full
jupyter: python3
---

```{python}
#| tags: [parameters]

# https://quarto.org/docs/computations/parameters.html
summary_file = ""
samples_file = ""
metadata_file = ""
disease = ""
```
```{python}
# Ensure input parameters have been handed in
if summary_file == "":
    raise ValueError("No paramenter handed in for summary file location")

if samples_file == "":
    raise ValueError("No paramenter handed in for samples file location")

if metadata_file == "":
    raise ValueError("No paramenter handed in for metadata file location")

if disease == "":
    raise ValueError("No disease paramenter handed in")
```

# Plots

```{python}
import altair as alt
import polars as pl
import plotly.graph_objs as go
from azure.identity import DefaultAzureCredential
from azure.storage.blob import BlobServiceClient
from azure.storage.blob._container_client import ContainerClient

from plotting.rt import plot_rt
from timeseries_data_formatting import prepare_plot_data
from plotting.timeseries import timeseries_plot
from azure_constants import AzureStorage


summary = pl.read_parquet(summary_file)
metadata = pl.read_parquet(metadata_file)


# This is likely all from a single report date. Grab it, and warn if not.
report_dates = metadata.get_column("report_date").unique()
if len(report_dates) != 1:
    raise ValueError("Multiple report dates found in metadata")

report_date = report_dates[0]

bsc = BlobServiceClient(
    AzureStorage.AZURE_STORAGE_ACCOUNT_URL,
    credential=DefaultAzureCredential()
)

obs_plot_data, interval_plot_data = prepare_plot_data(
    summary_data=summary, date_to_use=report_date, bsc=bsc
)

# Gather the set of unique states
states: list[str] = summary.get_column("geo_value").unique().sort().to_list()

# Create the plots for each state
rt_plots: list[alt.LayerChart] = [plot_rt(summary, state, disease, report_date) for state in states]
timeseries_plots: list[go.Figure] = [
    timeseries_plot(
        state=state,
        disease=disease,
        obs_plot_data=obs_plot_data,
        interval_plot_data=interval_plot_data,
    )
    for state in states
]

assert len(rt_plots) == len(timeseries_plots)
```


```{python}
#| layout: [[65, 35]]
# The above means split each row (the rt and timeseries plots) 75% and 25% respectively.

# Need to use a combination of the `#| layout` property and setting the width of the rt
# plots here, and the width of the timeseries plots in the timeseries_plot() function.
for timeseries, rt in zip(timeseries_plots, rt_plots):
    timeseries.show()
    rt.properties(width=500, height=500).show()
```
